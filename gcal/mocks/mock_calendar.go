// Code generated by MockGen. DO NOT EDIT.
// Source: oncall/gcal (interfaces: ICalendar)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockICalendar is a mock of ICalendar interface.
type MockICalendar struct {
	ctrl     *gomock.Controller
	recorder *MockICalendarMockRecorder
}

// MockICalendarMockRecorder is the mock recorder for MockICalendar.
type MockICalendarMockRecorder struct {
	mock *MockICalendar
}

// NewMockICalendar creates a new mock instance.
func NewMockICalendar(ctrl *gomock.Controller) *MockICalendar {
	mock := &MockICalendar{ctrl: ctrl}
	mock.recorder = &MockICalendarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICalendar) EXPECT() *MockICalendarMockRecorder {
	return m.recorder
}

// CreateDailyEvent mocks base method.
func (m *MockICalendar) CreateDailyEvent(arg0 time.Time, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDailyEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDailyEvent indicates an expected call of CreateDailyEvent.
func (mr *MockICalendarMockRecorder) CreateDailyEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDailyEvent", reflect.TypeOf((*MockICalendar)(nil).CreateDailyEvent), arg0, arg1)
}
